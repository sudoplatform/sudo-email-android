apply plugin: 'com.android.library'
apply plugin: 'com.amazonaws.appsync'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: "org.owasp.dependencycheck"

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 30
        versionCode = 1
        versionName = "2.0.1"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        testApplicationId = "com.sudoplatform.sudoemail.test"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    resourcePrefix 'sem_'

    packagingOptions {
        pickFirst("META-INF/atomicfu.kotlin_module")
        pickFirst("META-INF/kotlinx-coroutines-core.kotlin_module")
        pickFirst("META-INF/sudoemail_debug.kotlin_module")
        pickFirst("META-INF/mimetypes.default")
        pickFirst("META-INF/mailcap.default")
        pickFirst("META-INF/LICENSE.md")
        pickFirst("META-INF/NOTICE.md")
    }

    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.all {
            outputs.upToDateWhen {false}
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

ext {
    coroutine_version = "1.4.3"
    kotlintest_version = "3.4.2"
}

dependencies {
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"

    // AWS
    //
    // AWS SDKs do not follow semantic versioning rules so we need to strictly specify AWS SDK versions.
    // Follow the process at https://anonyome.atlassian.net/wiki/spaces/PLA/pages/840073287/AWS+Android+SDK+versions+to+use+for+platform+SDKs
    // for updating AWS SDK versions.
    implementation "com.amazonaws:aws-android-sdk-core:$aws_version!!"
    implementation "com.amazonaws:aws-android-sdk-appsync:$appsync_version!!"

    // Sudo Platform
    implementation "com.sudoplatform:sudokeymanager:3.7.3"
    implementation "com.sudoplatform:sudologging:1.0.25"
    implementation "com.sudoplatform:sudoconfigmanager:1.2.3"
    implementation "com.sudoplatform:sudouser:9.3.5"
    implementation "com.sudoplatform:sudoapiclient:2.0.4"
    implementation "com.sudoplatform:sudoprofiles:6.2.1"

    // Utils
    //noinspection GradleDependency
    implementation "commons-codec:commons-codec:1.15"
    implementation "org.bouncycastle:bcpkix-jdk15to18:1.68"

    // Testing
    testImplementation "junit:junit:4.13.2"
    testImplementation "io.kotlintest:kotlintest-assertions:$kotlintest_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutine_version"
    testImplementation "org.mockito:mockito-core:3.10.0"
    testImplementation "org.mockito.kotlin:mockito-kotlin:3.2.0"
    testImplementation "androidx.test:core:1.3.0"
    testImplementation "org.robolectric:robolectric:4.5.1"
    testImplementation "com.jakewharton.timber:timber:4.7.1"

    androidTestImplementation "androidx.test.ext:junit:1.1.2"
    androidTestImplementation "androidx.test:runner:1.3.0"
    androidTestImplementation "androidx.test:core:1.3.0"
    androidTestImplementation "io.kotlintest:kotlintest-assertions:$kotlintest_version"
    androidTestImplementation "com.jakewharton.timber:timber:4.7.1"
    androidTestImplementation "org.awaitility:awaitility:3.1.6"
    androidTestImplementation('com.sun.mail:jakarta.mail:2.0.0-RC6') {
        // This exclusion and the inclusion of the modified jar below are to work around
        // an error in the pom.xml metadata. https://github.com/eclipse-ee4j/jaf/issues/53
        exclude group: 'com.sun.activation', module: 'jakarta.activation'
    }
    androidTestImplementation files('libs/jakarta.activation-2.0.0-RC3-ali1.jar')
}

configurations.all {
    resolutionStrategy {
        dependencySubstitution {
            // Some kotlin 1.4 things aren't uniformaly updated yet
            substitute module("org.jetbrains.kotlin:kotlin-reflect") with module("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")
        }
    }
}

// Returns a list of `configurations` which should not be scanned for vulnerabilities
def getConfigurationsToSkip = { configs ->
    configs.findAll {
        it.name.startsWithAny("androidTest", "test", "lint") ||
                it.name.contains("AndroidTest") ||
                it.name.contains("UnitTest")
    }.collect {
        it.name
    }
}

tasks.register("printConfigurationsToSkip") {
    group = "OWASP dependency-check"
    description = "Print the configurations which are skipped when scanning for vulnerable dependencies"
    doLast {
        println "Configurations to skip when scanning for vulnerable dependencies:"
        println getConfigurationsToSkip(configurations).join("\n")
    }
}

afterEvaluate {
    // NOTE: this must be within `afterEvaluate` to ensure all the configurations have been created before filtering them
    dependencyCheck {
        suppressionFile file("../dependency-suppression.xml").toString()
        failBuildOnCVSS 0
        skipConfigurations = getConfigurationsToSkip(configurations)
    }
}

// https://github.com/cookpad/license-tools-plugin
apply plugin: "com.cookpad.android.licensetools"
licenseTools {
    licensesYaml = file("licenses.yml")
    ignoredGroups = ["com.nhaarman:mockito-kotlin", "com.anonyome", "com.sudoplatform"]
    ignoredProjects = ["org.mockito"]
}

@Grab('org.yaml:snakeyaml:1.17') // Yaml parser
import org.yaml.snakeyaml.Yaml

task checkLicenseHaveRequiredFields {
    description = "Check every license entry has the mandatory fields"
    group = "verification"

    doLast {
        def mandatoryFields = ["artifact", "name", "copyrightHolder", "url"]
        Yaml parser = new Yaml()
        def licenses = parser.load((file("licenses.yml") as File).text)
        def errors = new StringBuilder()
        licenses.each { artifact ->
            mandatoryFields.each { field ->
                if (artifact[field] == null) {
                    errors.append("License entry '${artifact.artifact}' is missing required element `$field`\n")
                }
            }
            if (artifact["license"] == null && artifact["licenseUrl" == null]) {
                errors.append("License entry '${artifact.artifact}' must have one of [license,licenseUrl]\n")
            }
        }
        if (errors.length() > 0) {
            throw new GradleException("Missing license elements:\n$errors")
        }
    }
}
checkLicenses.finalizedBy checkLicenseHaveRequiredFields

// Kotlin Lint
apply plugin: 'org.jmailen.kotlinter'

kotlinter {
    ignoreFailures = false
    reporters = ['checkstyle', 'plain']
    experimentalRules = false
}

// Apollo Code Generation
apollo {
    outputPackageName = "com.sudoplatform.sudoemail.graphql"
}

// Jacoco test coverage
apply plugin: 'jacoco'

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    classDirectories.setFrom(fileTree(
            dir: "${buildDir}/tmp/kotlin-classes/debug",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )
    )
    sourceDirectories.setFrom(files("${buildDir.parent}/sudoemail/src/main/java"))
    executionData.setFrom(fileTree(["dir":"$buildDir", "includes":["**/*.exec", "**/*.ec"]]))
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

// Dokka documentation generation
apply plugin: 'org.jetbrains.dokka'

dokkaHtml {
    outputDirectory.set(project.file("$buildDir/javadoc"))
    dokkaSourceSets {
        configureEach {
            jdkVersion.set(8)
            skipEmptyPackages.set(true)
            includes.from(files("packages.md"))
            samples.from(files("src/test/java/com/sudoplatform/sudoemail/samples/Samples.kt"))
            // Root URL of the generated documentation to link with. The trailing slash is required!
            externalDocumentationLink {
                url.set(new URL("https://sudoplatform.github.io/sudo-user-android/sudouser/"))
                packageListUrl.set(new URL("https://sudoplatform.github.io/sudo-user-android/sudouser/package-list"))
            }
        }
    }
}

// Sonarqube code analysis
if (project.file("${rootProject.projectDir}/util/sonarqube.gradle").exists()) {
    ext.sonarProjectKey = "sudo-email-android"
    ext.sonarProjectName = "sudo-email-android"
    ext.sonarExclusions = ["*.png", "*.jks", "*.json", "*.key"]
    apply from: "${rootProject.projectDir}/util/sonarqube.gradle"
}

// Setup common publishing variables
ext {
    projectArtifact = project.name
    projectDescription = 'Sudo Email SDK for the Sudo Platform by Anonyome Labs.'
    projectUrl = 'https://github.com/sudoplatform/sudo-email-android'
    projectSCM = 'scm:git:github.com/sudoplatform/sudo-email-android.git'
    if (project.findProperty("tag")) {
        projectVersion = "$tag"
    } else {
        projectVersion = project.android.defaultConfig.versionName
    }
}

// Internal and External publishing
if(project.findProperty("tag") &&
        project.file("${rootProject.projectDir}/util/publish-mavencentral.gradle").exists()) {
    apply from: "${rootProject.projectDir}/util/publish-mavencentral.gradle"
}
else if (project.file("${rootProject.projectDir}/util/publish-internal-android.gradle").exists()) {
    apply from: "${rootProject.projectDir}/util/publish-internal-android.gradle"
}
