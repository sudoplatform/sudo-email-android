apply plugin: 'com.android.library'
apply plugin: 'com.amazonaws.appsync'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: "org.owasp.dependencycheck"
apply plugin: "org.jetbrains.kotlin.plugin.serialization"

node {
    version = "16.18.0"
}

android {
    compileSdk 34

    namespace "com.sudoplatform.sudoemail"

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 33
        versionCode = 1
        versionName = "12.1.0"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        testApplicationId = "com.sudoplatform.sudoemail.test"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    resourcePrefix 'sem_'

    packagingOptions {
        pickFirst("META-INF/atomicfu.kotlin_module")
        pickFirst("META-INF/kotlinx-coroutines-core.kotlin_module")
        pickFirst("META-INF/sudoemail_debug.kotlin_module")
        pickFirst("META-INF/mimetypes.default")
        pickFirst("META-INF/mailcap.default")
        pickFirst("META-INF/LICENSE.md")
        pickFirst("META-INF/NOTICE.md")
    }

    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true
        unitTests.all {
            outputs.upToDateWhen {false}
            jacoco {
                includeNoLocationClasses = true
                excludes = [
                        'jdk.internal.*'
                ]
            }
        }
    }

    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

ext {
    coroutine_version = '1.8.0'
    kotlintest_version = "3.4.2"
}

dependencies {
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"
    implementation('org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3')

    // AWS
    //
    // AWS SDKs do not follow semantic versioning rules so we need to strictly specify AWS SDK versions.
    // Follow the process at https://anonyome.atlassian.net/wiki/spaces/PLA/pages/840073287/AWS+Android+SDK+versions+to+use+for+platform+SDKs
    // for updating AWS SDK versions.
    implementation "com.amazonaws:aws-android-sdk-core:$aws_version!!"
    implementation "com.amazonaws:aws-android-sdk-appsync:$appsync_version!!"

    // Sudo Platform
    implementation 'com.sudoplatform:sudokeymanager:7.2.1'
    implementation "com.sudoplatform:sudologging:4.0.0"
    implementation "com.sudoplatform:sudoconfigmanager:7.0.2"
    implementation 'com.sudoplatform:sudouser:18.0.1'
    implementation 'com.sudoplatform:sudoapiclient:9.0.0'
    implementation 'com.sudoplatform:sudonotification:2.0.0'

    implementation 'com.sun.mail:jakarta.mail:2.0.1'
    implementation 'com.sun.activation:jakarta.activation:2.0.1'
    implementation 'com.google.firebase:firebase-messaging-ktx:23.4.1'

    // Testing
    testImplementation "junit:junit:4.13.2"
    testImplementation "io.kotlintest:kotlintest-assertions:$kotlintest_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutine_version"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:5.3.1'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation "androidx.test:core:1.5.0"
    testImplementation 'org.robolectric:robolectric:4.12.1'
    testImplementation "com.jakewharton.timber:timber:5.0.1"
    testImplementation 'commons-codec:commons-codec:1.17.0'

    androidTestImplementation "androidx.test.ext:junit:1.1.5"
    androidTestImplementation "androidx.test:runner:1.5.2"
    androidTestImplementation "androidx.test:core:1.5.0"
    androidTestImplementation "io.kotlintest:kotlintest-assertions:$kotlintest_version"
    androidTestImplementation "com.jakewharton.timber:timber:5.0.1"
    // Awaitility >= 4.x.x brings incompatible hamcrest 2.1 with it
    androidTestImplementation 'org.awaitility:awaitility-kotlin:3.1.6'

    androidTestImplementation 'com.sudoplatform:sudoentitlements:10.0.0'
    androidTestImplementation 'com.sudoplatform:sudoentitlementsadmin:8.0.0'
    androidTestImplementation 'com.sudoplatform:sudoprofiles:14.0.0'
}

// Returns a list of `configurations` which should not be scanned for vulnerabilities
def getConfigurationsToSkip = { configs ->
    configs.findAll {
        it.name.startsWithAny("androidTest", "test", "lint") ||
                it.name.contains("AndroidTest") ||
                it.name.contains("UnitTest")
    }.collect {
        it.name
    }
}

tasks.register("printConfigurationsToSkip") {
    group = "OWASP dependency-check"
    description = "Print the configurations which are skipped when scanning for vulnerable dependencies"
    doLast {
        println "Configurations to skip when scanning for vulnerable dependencies:"
        println getConfigurationsToSkip(configurations).join("\n")
    }
}

afterEvaluate {
    // NOTE: this must be within `afterEvaluate` to ensure all the configurations have been created before filtering them
    dependencyCheck {
        suppressionFile file("../dependency-suppression.xml").toString()
        failBuildOnCVSS 0
        skipConfigurations = getConfigurationsToSkip(configurations)
        cve {
            urlModified = "https://anonyome-nist-cve-mirror.s3.amazonaws.com/nvdcve-1.1-modified.json.gz"
            urlBase = "https://anonyome-nist-cve-mirror.s3.amazonaws.com/nvdcve-1.1-%d.json.gz"
            startYear = 2002
            waitTime = 0
        }

        analyzers {
            assemblyEnabled = false
            ossIndex {
                username = "${ossIndexUsername}"
                password = "${ossIndexPassword}"
                warnOnlyOnRemoteErrors = true
            }
        }
    }
}

apply plugin: "com.cookpad.android.plugin.license-tools"
licenseTools {
    licensesYaml = file("licenses.yml")
    ignoredGroups = ["com.nhaarman:mockito-kotlin", "com.anonyome", "com.sudoplatform"]
    ignoredProjects = ["org.mockito"]
}

@Grab('org.yaml:snakeyaml:1.17') // Yaml parser
import org.yaml.snakeyaml.Yaml

task checkLicenseHaveRequiredFields {
    description = "Check every license entry has the mandatory fields"
    group = "verification"

    doLast {
        def mandatoryFields = ["artifact", "name", "copyrightHolder", "url"]
        Yaml parser = new Yaml()
        def licenses = parser.load((file("licenses.yml") as File).text)
        def errors = new StringBuilder()
        licenses.each { artifact ->
            mandatoryFields.each { field ->
                if (artifact[field] == null) {
                    errors.append("License entry '${artifact.artifact}' is missing required element `$field`\n")
                }
            }
            if (artifact["license"] == null && artifact["licenseUrl" == null]) {
                errors.append("License entry '${artifact.artifact}' must have one of [license,licenseUrl]\n")
            }
        }
        if (errors.length() > 0) {
            throw new GradleException("Missing license elements:\n$errors")
        }
    }
}
checkLicenses.finalizedBy checkLicenseHaveRequiredFields

// Kotlin Lint
apply plugin: 'org.jmailen.kotlinter'

kotlinter {
    ignoreFailures = false
    reporters = ['checkstyle', 'plain']
}

// Apollo Code Generation
apollo {
    outputPackageName = "com.sudoplatform.sudoemail.graphql"
}

// Jacoco test coverage
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.10"
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    classDirectories.setFrom(
        fileTree(
            dir: "${buildDir}/tmp/kotlin-classes/debug",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
        )
    )
    sourceDirectories.setFrom(files("${buildDir.parent}/sudoemail/src/main/java"))
    executionData.setFrom(fileTree(["dir":"${buildDir.parent}", "includes":["**/*.exec", "**/*.ec"]]))
}

// Dokka documentation generation
apply plugin: 'org.jetbrains.dokka'

dokkaHtml {
    outputDirectory.set(project.file("$buildDir/javadoc"))
    dokkaSourceSets {
        configureEach {
            jdkVersion.set(8)
            skipEmptyPackages.set(true)
            includes.from(files("packages.md"))
            samples.from(files("src/test/java/com/sudoplatform/sudoemail/samples/Samples.kt"))
            // Root URL of the generated documentation to link with. The trailing slash is required!
            externalDocumentationLink {
                url.set(new URL("https://sudoplatform.github.io/sudo-user-android/sudouser/"))
                packageListUrl.set(new URL("https://sudoplatform.github.io/sudo-user-android/sudouser/package-list"))
            }
        }
    }
}

// Sonarqube code analysis
if (project.file("${rootProject.projectDir}/util/sonarqube.gradle").exists()) {
    ext.sonarProjectKey = "sudo-email-android"
    ext.sonarProjectName = "sudo-email-android"
    ext.sonarExclusions = ["*.png", "*.jks", "*.json", "*.key"]
    apply from: "${rootProject.projectDir}/util/sonarqube.gradle"
}

// Setup common publishing variables
ext {
    projectArtifact = project.name
    projectDescription = 'Sudo Email SDK for the Sudo Platform by Anonyome Labs.'
    projectUrl = 'https://github.com/sudoplatform/sudo-email-android'
    projectSCM = 'scm:git:github.com/sudoplatform/sudo-email-android.git'
    if (project.findProperty("tag")) {
        projectVersion = "$tag"
    } else {
        projectVersion = project.android.defaultConfig.versionName
    }
}

// Internal and External publishing
if(project.findProperty("tag") &&
        project.file("${rootProject.projectDir}/util/publish-mavencentral.gradle").exists()) {
    apply from: "${rootProject.projectDir}/util/publish-mavencentral.gradle"
}
else if (project.file("${rootProject.projectDir}/util/publish-internal-android.gradle").exists()) {
    apply from: "${rootProject.projectDir}/util/publish-internal-android.gradle"
}
